name: Go CI

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  lint:
    name: 代码检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: 创建golangci-lint配置
        run: |
          cat > .golangci.yml << EOF
          run:
            go: '1.24'
            timeout: 5m
          
          linters:
            disable-all: true
            enable:
              - errcheck
              - gosimple
              - govet
              - ineffassign
              - staticcheck
              - unused
              - gofmt
          
          issues:
            exclude-rules:
              - path: _test\.go
                linters:
                  - errcheck
          EOF

      - name: 安装 golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/HEAD/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.4.0
          golangci-lint --version

      - name: 运行代码检查
        run: golangci-lint run --timeout=5m

  test:
    name: 单元测试
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.22', '1.23', '1.24']
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: 运行测试
        run: make test

      - name: 生成覆盖率报告
        if: matrix.go-version == '1.24'
        run: make coverage

      - name: 上传覆盖率报告
        if: matrix.go-version == '1.24'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out

      - name: 上传覆盖率到 Codecov
        if: matrix.go-version == '1.24'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          fail_ci_if_error: false

  format:
    name: 代码格式化
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: 检查代码格式
        run: |
          go fmt ./...
          if [ -n "$(git status --porcelain)" ]; then
            echo "代码格式不符合规范，请运行 'go fmt ./...' 并提交更改"
            git status
            git diff
            exit 1
          fi

  verify:
    name: 验证模块
    runs-on: ubuntu-latest
    needs: [lint, test, format]
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: 验证依赖
        run: go mod tidy

      - name: 验证模块
        run: go mod verify

      - name: 运行 go vet
        run: go vet ./...

  benchmark:
    name: 性能基准测试
    runs-on: ubuntu-latest
    needs: [verify]
    if: github.event_name == 'push'
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: 运行基准测试
        run: go test -bench=. -benchmem ./...

  pkg-go-dev:
    name: 更新 pkg.go.dev
    runs-on: ubuntu-latest
    needs: [verify]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: 获取模块名称
        id: get-module
        run: echo "module=$(go list -m)" >> $GITHUB_OUTPUT

      - name: 触发 pkg.go.dev 更新
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          GOPROXY=https://proxy.golang.org go list -m ${{ steps.get-module.outputs.module }}@$VERSION